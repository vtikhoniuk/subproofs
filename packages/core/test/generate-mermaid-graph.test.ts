import { generateMermaidGraph } from "@substreams/core";
import { createSubstreamFixture } from "@substreams/core/testutils";
import { assert, expect, test } from "vitest";

const uniswap = createSubstreamFixture("uniswap-v3");

test("should generate a mermaid graph", () => {
  assert(uniswap.modules);

  expect(generateMermaidGraph(uniswap.modules.modules)).toMatchInlineSnapshot(
    `
    "graph TD;
      map_pools_created[map: map_pools_created];
      sf.ethereum.type.v2.Block[source: sf.ethereum.type.v2.Block] --> map_pools_created;
      store_pools_created[store: store_pools_created];
      map_pools_created --> store_pools_created;
      store_tokens[store: store_tokens];
      map_pools_created --> store_tokens;
      store_pool_count[store: store_pool_count];
      map_pools_created --> store_pool_count;
      map_tokens_whitelist_pools[map: map_tokens_whitelist_pools];
      map_pools_created --> map_tokens_whitelist_pools;
      store_tokens_whitelist_pools[store: store_tokens_whitelist_pools];
      map_tokens_whitelist_pools --> store_tokens_whitelist_pools;
      map_extract_data_types[map: map_extract_data_types];
      sf.ethereum.type.v2.Block[source: sf.ethereum.type.v2.Block] --> map_extract_data_types;
      store_pools_created --> map_extract_data_types;
      store_pool_sqrt_price[store: store_pool_sqrt_price];
      map_extract_data_types --> store_pool_sqrt_price;
      store_prices[store: store_prices];
      sf.substreams.v1.Clock[source: sf.substreams.v1.Clock] --> store_prices;
      map_extract_data_types --> store_prices;
      store_pools_created --> store_prices;
      store_pool_liquidities[store: store_pool_liquidities];
      sf.substreams.v1.Clock[source: sf.substreams.v1.Clock] --> store_pool_liquidities;
      map_extract_data_types --> store_pool_liquidities;
      store_total_tx_counts[store: store_total_tx_counts];
      sf.substreams.v1.Clock[source: sf.substreams.v1.Clock] --> store_total_tx_counts;
      map_extract_data_types --> store_total_tx_counts;
      store_swaps_volume[store: store_swaps_volume];
      sf.substreams.v1.Clock[source: sf.substreams.v1.Clock] --> store_swaps_volume;
      map_extract_data_types --> store_swaps_volume;
      store_pools_created --> store_swaps_volume;
      store_total_tx_counts --> store_swaps_volume;
      store_eth_prices --> store_swaps_volume;
      store_native_amounts[store: store_native_amounts];
      map_extract_data_types --> store_native_amounts;
      store_eth_prices[store: store_eth_prices];
      sf.substreams.v1.Clock[source: sf.substreams.v1.Clock] --> store_eth_prices;
      map_extract_data_types --> store_eth_prices;
      store_pools_created --> store_eth_prices;
      store_prices --> store_eth_prices;
      store_tokens_whitelist_pools --> store_eth_prices;
      store_native_amounts --> store_eth_prices;
      store_pool_liquidities --> store_eth_prices;
      store_token_tvl[store: store_token_tvl];
      map_extract_data_types --> store_token_tvl;
      store_derived_tvl[store: store_derived_tvl];
      sf.substreams.v1.Clock[source: sf.substreams.v1.Clock] --> store_derived_tvl;
      map_extract_data_types --> store_derived_tvl;
      store_token_tvl --> store_derived_tvl;
      store_pools_created --> store_derived_tvl;
      store_eth_prices --> store_derived_tvl;
      store_derived_factory_tvl[store: store_derived_factory_tvl];
      sf.substreams.v1.Clock[source: sf.substreams.v1.Clock] --> store_derived_factory_tvl;
      store_derived_tvl -- deltas --> store_derived_factory_tvl;
      store_ticks_liquidities[store: store_ticks_liquidities];
      sf.substreams.v1.Clock[source: sf.substreams.v1.Clock] --> store_ticks_liquidities;
      map_extract_data_types --> store_ticks_liquidities;
      store_positions[store: store_positions];
      map_extract_data_types --> store_positions;
      store_min_windows[store: store_min_windows];
      sf.substreams.v1.Clock[source: sf.substreams.v1.Clock] --> store_min_windows;
      store_prices -- deltas --> store_min_windows;
      store_eth_prices -- deltas --> store_min_windows;
      store_max_windows[store: store_max_windows];
      sf.substreams.v1.Clock[source: sf.substreams.v1.Clock] --> store_max_windows;
      store_prices -- deltas --> store_max_windows;
      store_eth_prices -- deltas --> store_max_windows;
      graph_out[map: graph_out];
      sf.substreams.v1.Clock[source: sf.substreams.v1.Clock] --> graph_out;
      store_pool_count -- deltas --> graph_out;
      store_total_tx_counts -- deltas --> graph_out;
      store_swaps_volume -- deltas --> graph_out;
      store_derived_factory_tvl -- deltas --> graph_out;
      store_eth_prices -- deltas --> graph_out;
      map_extract_data_types --> graph_out;
      map_pools_created --> graph_out;
      store_pool_sqrt_price -- deltas --> graph_out;
      store_pool_sqrt_price --> graph_out;
      store_pool_liquidities -- deltas --> graph_out;
      store_token_tvl -- deltas --> graph_out;
      store_prices -- deltas --> graph_out;
      store_prices --> graph_out;
      store_tokens --> graph_out;
      store_tokens_whitelist_pools -- deltas --> graph_out;
      store_derived_tvl -- deltas --> graph_out;
      store_ticks_liquidities -- deltas --> graph_out;
      store_total_tx_counts --> graph_out;
      store_eth_prices --> graph_out;
      store_positions --> graph_out;
      store_min_windows -- deltas --> graph_out;
      store_max_windows -- deltas --> graph_out;"
  `,
  );
});
